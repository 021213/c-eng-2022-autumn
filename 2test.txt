1. recursive (the function can contain only 1 line)
int min(int a, int b, int c, int d)
{
	return (a > b ? min(b, a, c, d) : b > c ? min(a, c, b, d) : c > d ? min(a, b, d, c) : a);
	return ((a <= b && a <= c && a <= d) ? a : min(b, c, d, a));
}

2.
You are given N and sequence of N numbers. Output the sequence in reverse order without arrays.
5
1 3 4 5 2 -> 2 5 4 3 1
int printreq(int n)
{
	int el = 0;
	std::cin >> el;
	if (n > 0)
	{
		printreq(n - 1);
	}
	std::cout << el;
}
3.
Write a function that expresses an integer number in the sum of less than 9 cubes of integer numbers or defines that it is impossible. Use recursion.
239 -> IMPOSSIBLE
17 -> 1 2 2

bool cando(int number, int count = 8)
{
	if (count < 0)
	{
		return false;
	}
	if (number = 0)
	{
		return true;
	}

	for (int i = 1; i * i * i < number; ++i)
	{
		if (cando(number - i * i * i, count - 1))
		{
			std::cout << i << " ";
			return true;
		}
	}

	return false;
}

int main()
{
	int n = 0;
	std::cin >> n;
	if (!cando(n))
	{
		std::cout << "IMPOSSIBLE";
	}
}

4.
Find number of safe allocations of Q queens and R rooks on a N*N chessboard.
Input Q R N
Output Number of allocations

1 2 3 -> 4
8 0 8 -> 92
0 2 4 -> 72
2 3 10 -> 26079424
